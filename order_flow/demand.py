from __future__ import annotations
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from order_flow.zone import Zone
    from order_flow.linked_queue import LinkedQ
    from order_flow.candle import Candle
    from order_flow.zone_rulebook import ZoneRulebook
    


class Demand:
    def __init__(self, zone: Zone, price_queue: LinkedQ, rulebook: ZoneRulebook):
        # ------------------- REDACTED ---------------------
        # --------------------------------------------------
        # --------------------------------------------------
        # --------------------------------------------------
        # --------------------------------------------------
        # --------------------------------------------------
        # --------------------------------------------------
        # --------------------------------------------------      
        self.tooltip = ""
        self.x = price_queue.dequeue_count - self.length
        self.rect = None
        self.rulebook = rulebook
        # --------------------------------------------------      

    def destroyed_zone(self, current_close: float, current_low: float):

        # ------------------- REDACTED ---------------------
        # --------------------------------------------------
        # --------------------------------------------------
        # --------------------------------------------------
        # --------------------------------------------------

    def get_zone_strength(self, price_queue: LinkedQ):

        local_price_q = price_queue.clone(debugger=False)

        # ------------------- REDACTED ---------------------
        # --------------------------------------------------
        # --------------------------------------------------
        # --------------------------------------------------
        # --------------------------------------------------
        # --------------------------------------------------
        # --------------------------------------------------
        # --------------------------------------------------    
        # --------------------------------------------------
        # --------------------------------------------------
        # --------------------------------------------------
        # --------------------------------------------------
        # --------------------------------------------------
        # --------------------------------------------------
        # --------------------------------------------------    
        # --------------------------------------------------
        # --------------------------------------------------
        # --------------------------------------------------
        # --------------------------------------------------
        # --------------------------------------------------
        # --------------------------------------------------
        # -------------------------------------------------- 
        # --------------------------------------------------
        # --------------------------------------------------
        # --------------------------------------------------
        # --------------------------------------------------
        # --------------------------------------------------
        # --------------------------------------------------
        # --------------------------------------------------       
        return impulse_COG, impulse_strength


    def calculate_purity(self, candle: Candle):

        # --------------------------------------------------
        # --------------------------------------------------
        # --------------------------------------------------
        # --------------------------------------------------
        # --------------------------------------------------
        # --------------------------------------------------
        # --------------------------------------------------    
        # --------------------------------------------------
        # --------------------------------------------------
        # --------------------------------------------------
        # --------------------------------------------------
        # --------------------------------------------------
        # --------------------------------------------------
        # --------------------------------------------------    
        # --------------------------------------------------
        # --------------------------------------------------
        # --------------------------------------------------
        # --------------------------------------------------
        # --------------------------------------------------
        # --------------------------------------------------
        # --------------------------------------------------    
        # --------------------------------------------------
        # --------------------------------------------------
        # --------------------------------------------------
        # --------------------------------------------------
        # --------------------------------------------------
        # --------------------------------------------------
        # --------------------------------------------------    

    def calculate_penetration(self, candle: Candle):
        new_penetration = round((self.high - candle.low) / self.height, 2)
        self.penetration = max(self.penetration, new_penetration)


    def calculate_tooltip(self):
        tooltip = (
            # --------------------------------------------------
            # --------------------------------------------------
            # --------------------------------------------------
            # --------------------------------------------------
            # --------------------------------------------------
            # --------------------------------------------------
            # --------------------------------------------------    
        )
        for name, value in self.confluence.items():
            tooltip += f"\n{name}: {value}"        
        self.tooltip = tooltip


    def __str__(self):
        # --------------------------------------------------   

