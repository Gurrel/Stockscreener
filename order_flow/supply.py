from __future__ import annotations
from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from order_flow.zone import Zone
    from order_flow.linked_queue import LinkedQ
    from order_flow.candle import Candle
    from order_flow.zone_rulebook import ZoneRulebook

class Supply:
    def __init__(self, zone: Zone, price_queue: LinkedQ, rulebook: ZoneRulebook):
        # ------------------- REDACTED ---------------------
        # --------------------------------------------------
        # --------------------------------------------------
        # --------------------------------------------------
        # --------------------------------------------------
        # --------------------------------------------------
        # --------------------------------------------------
        # --------------------------------------------------        
        self.tooltip = ""
        self.x = price_queue.dequeue_count - self.length
        self.rect = None
        self.rulebook = rulebook
        # ----------------------------------------------------

    def destroyed_zone(self, current_close: float, current_high: float):
        if (current_high >= self.high):
            return True
        else:
            return False
        

    def get_zone_strength(self, price_queue: LinkedQ):
        local_price_q = price_queue.clone(debugger=False)

        # ------------------- REDACTED ---------------------
        # --------------------------------------------------
        # --------------------------------------------------
        # --------------------------------------------------
        # --------------------------------------------------
        # --------------------------------------------------
        # --------------------------------------------------
        # --------------------------------------------------        
        
        
        # FIND LAST IMPULSE CANDLE
        current_candle: Candle = local_price_q.dequeue()
        valid_down_candle = True
        # ------------------- REDACTED ---------------------
            # -----------------------------------------------------------
        # ------------------------------------------------------------------
            # --------------------------------------------------
        # -------------------------------------------------------------
            # --------------------------------------------------------------
        # --------------------------------------------------
        # --------------------------------------------------        
        
        if valid_down_candle:
            low_impulse_candle = current_candle
        else:
            low_impulse_candle: Candle = current_candle.previous_candle
            
        impulse_COG = 0
        for leg_in_candle in opposite_leg_in_candles:
            # ------------------- REDACTED ---------------------
                # --------------------------------------------------
            # -------------------------
            # --------------------------------------------------
                # ----------------------
            # --------------------------------------------------
            # --------------------------------------------------
            # --------------------
            

    # --------------------------------------------------
    # --------------------------------------------------        

        return impulse_COG, impulse_strength

    def calculate_purity(self, candle: Candle):
        # ----- Step 1: First Impulse Handling -----

        # ------------------- REDACTED ---------------------
        # --------------------------------------------------
        # --------------------------------------------------
        # --------------------------------------------------
        # --------------------------------------------------
        # --------------------------------------------------
        # --------------------------------------------------
        # -------------------------------------------------- 
        # ------------------- REDACTED ---------------------
        # --------------------------------------------------
        # --------------------------------------------------
        # --------------------------------------------------
        # --------------------------------------------------
        # --------------------------------------------------
        # --------------------------------------------------
        # --------------------------------------------------
        # --------------------------------------------------
        # --------------------------------------------------
        # --------------------------------------------------
        # --------------------------------------------------
        # --------------------------------------------------
        # --------------------------------------------------
        # --------------------------------------------------
        # --------------------------------------------------
        # --------------------------------------------------              
        

            
    def calculate_penetration(self, candle: Candle):
        new_penetration = round((candle.high - self.low) / self.height, 2)
        self.penetration = max(self.penetration, new_penetration)

    def calculate_tooltip(self):
        tooltip = (
            # ------------------- REDACTED ---------------------
            # --------------------------------------------------
            # --------------------------------------------------
            # --------------------------------------------------
            # --------------------------------------------------
            # --------------------------------------------------
            # --------------------------------------------------
            # -------------------------------------------------- 
        )
        for name, value in self.confluence.items():
            tooltip += f"\n{name}: {value}"        
        self.tooltip = tooltip


    def __str__(self):
        # ------------------- REDACTED ---------------------
